swagger: "2.0"
info:
  title: DonLog API
  description: |
    API specification for DonLog blogging project
    Server implementation must match following routes, to be compatible with frontend
  version: 1.0.0
 
schemes:
  - http

tags:
  - name: "Authentication Routes"
    description: Routes that relate to account creation and management
  - name: "Blog Routes"
    description: Routes that are used for interacting with and managing blogs
  - name: "Admin Routes"
    description: Routes that are related to server data and management
components:
  prim:
    Email:
      type: string
      example: "person@gmail.com"
    Error:
      type: string
      example: "specific message about why route failed"
    Password:
      type: string
      example: "pAs5w0Rd19#"
    NameFirst:
      type: string
      example: "Donald"
    NameLast:
      type: string
      example: "Danilo"
    Name:
      type: string
      example: "Donald Danilo"
    NameUser:
      type: string
      example: "DoFn"
    Session:
      type: string
      example: "abgo1940vwnfo139gfn"
    BlogId:
      type: integer
      example: "123"
    PageId:
      type: integer
      example: "123"
    BlogTitle:
      type: string
      example: "My Blog"
    BlogDescription:
      type: string
      example: "This is a blog about myself"
    PageText:
      type: string
      example: "Content of page"
  return:
    Empty:
      type: object
    Session:
      type: object
      properties:
        session:
          $ref: '#/components/prim/Session'
    Error:
      type: object
      properties:
        error:
          $ref: '#/components/prim/Error'
    BlogId:
      type: object
      properties:
        blogId: 
          $ref: '#/components/prim/BlogId'
    PageId:
      type: object
      properties:
        pageId: 
          $ref: '#/components/prim/PageId'
    PublicDetails:
      type: object
      properties:
        nameUser:
          $ref: '#/components/prim/NameUser'
        email:
          $ref: '#/components/prim/Email'
        name:
          $ref: '#/components/prim/Name'
    BlogListSummary:
      type: object
      properties:
        blogs:
          type: array
          items:
            type: object
            properties:
              title:
                $ref: '#/components/prim/BlogTitle'
              description:
                $ref: '#/components/prim/BlogDescription'
              blogId:
                $ref: '#/components/prim/BlogId'
    PageListSummary:
      type: object
      properties:
        blogInfo:
          type: object
          properties:
            title:
              $ref: '#/components/prim/BlogTitle'
            description:
              $ref: '#/components/prim/BlogDescription'
            blogId:
              $ref: '#/components/prim/BlogId'
        pages:
          type: array
          items:
            type: object
            properties:
              title:
                $ref: '#/components/prim/BlogTitle'
              pageId:
                $ref: '#/components/prim/PageId'
    Page: 
      type: object 
      properties:
        title:
          $ref: '#/components/prim/BlogTitle'
        text: 
          $ref: '#/components/prim/PageText'
  body:
    Register:
        in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            email:
              $ref: '#/components/prim/Email'
            password:
              $ref: '#/components/prim/Password'
            nameFirst:
              $ref: '#/components/prim/NameFirst'
            nameLast:
              $ref: '#/components/prim/NameLast'
            nameUser:
              $ref: '#/components/prim/NameUser'
    Unregister:
        in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            password:
              $ref: '#/components/prim/Password'
    Login:
        in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            password:
              $ref: '#/components/prim/Password'
            nameUser:
              $ref: '#/components/prim/NameUser'
    CreateBlog:
        in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            title:
              $ref: '#/components/prim/BlogTitle'
            description:
              $ref: '#/components/prim/BlogDescription'
    BlogId:
        in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            blogId:
              $ref: '#/components/prim/BlogId'
    PageId:
        in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            pageId:
              $ref: '#/components/prim/PageId'
    GetDetails:
        in: body
        name: body
        required: true
        schema:
          type: object
          properties:
            nameUser:
              $ref: '#/components/prim/NameUser'
    PageCreate:
      in: body
      name: body
      required:  true
      schema:
        type: object
        properties:
          title:
            $ref: '#/components/prim/BlogTitle'
          description:
            $ref: '#/components/prim/PageText'
  header:
    Session:
      in: header
      name: session
      required: true
      schema:
        type: string
  path: 
    BlogId: 
      in: path
      name: blogid
      required: true
      schema:
        $ref: '#/components/prim/BlogId'
paths:
  /user/auth/register:
    post:
      summary: Register a new DonLog user
      description: This route registers a DonLog account in the system, when given user details
      tags:
        - "Authentication Routes"
      parameters:
        - $ref: '#/components/body/Register'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Session'
        400:
          description: |
            If any of the following conditions are met: 
            - Email address is in use
            - Email is invalid (using https://pkg.go.dev/github.com/AfterShip/email-verifier)
            - Username is in use
            - NameFirst or NameLast has characters other than alphabetic characters
            - NameFirst or NameLast is empty
            - Password is less than 10 characters
            - Password does not contain at least 1 capital letter, lowercase letter, number or special character
          schema:
            $ref: '#/components/return/Error'
    delete:
      summary: Unregister a DonLog user
      description: This route deletes a DonLog user's account, when in a valid session, after re-entering account details
      tags:
        - "Authentication Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/Unregister'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        400:
          description: Password does not match logged in user's password
          schema:
            $ref: '#/components/return/Error'
  /user/auth/details:
    get:
      summary: Get the details of a DonLog user
      description: Return the registration information of a DonLog user, when in an active session
      tags:
        - "Authentication Routes"
      parameters:
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/PublicDetails'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
  /user/auth/login:
    post:
      summary: Log in a DonLog user
      description: Takes in account information, and generates a session if the provided details match an account
      tags:
        - "Authentication Routes"
      parameters:
        - $ref: '#/components/body/Login'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Session'
        400:
          description: |
            If any of the following are true:
            - Username does not exist
            - Password is not correct for the given account
          schema:
            $ref: '#/components/return/Error'
    delete:
      summary: Log out a DonLog user
      description: Deletes an active user session, when given in the header
      tags:
        - "Authentication Routes"
      parameters:
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
  /user/blog:
    post:
      summary: Create a new blog 
      description: Takes in blog information, and creates a blog with said information in the system
      tags:
        - "Blog Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/CreateBlog'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/BlogId'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - Blog title is under 6 characters
            - Blog title is not alphanumeric
            - Blog description exceeds 1000 characters
          schema:
            $ref: '#/components/return/Error'
    get:
      summary: Get a list of a user's blogs
      description: Returns a summary of a user's blogs, specified in the request body
      tags:
        - "Blog Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/GetDetails'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/BlogListSummary'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        403:
          description: User does not have permission to view specified user's blogs
          schema:
            $ref: '#/components/return/Error'
        400:
          description: Specified user does not exist
          schema:
            $ref: '#/components/return/Error'
    delete:
      summary: Delete a blog
      description: Deletes a blog from the system when given a blog id
      tags:
        - "Blog Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/BlogId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        403:
          description: Blog id is invalid or not owned by user
          schema:
            $ref: '#/components/return/Error'   
  /user/blog/{blogid}:
    post:
      summary: Create a new blog page
      description: Takes in a blog id, and page info, and adds the page to the blog
      tags:
        - "Blog Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/path/BlogId'
        - $ref: '#/components/body/PageCreate'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/PageId'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        403:
          description: Blog is invalid or not owned by user
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - Page title is empty
            - Page text is empty
          schema:
            $ref: '#/components/return/Error'
    get:
      summary: Return a summary of a blog
      description: Takes in a blog id, and returns a summary of the pages in the blog and the blog itself
      tags:
        - "Blog Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/path/BlogId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/PageListSummary'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        403:
          description: User does not have permission to view specified user's blogs
          schema:
            $ref: '#/components/return/Error'
        400:
          description: Specified user does not exist
          schema:
            $ref: '#/components/return/Error'
    delete:
      summary: Delete a page from a blog
      description: takes in a blog id, session, and pageid, then deletes the page
      tags:
        - "Blog Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/path/BlogId'
        - $ref: '#/components/body/PageId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        403:
          description: Blog is invalid or not owned by user
          schema:
            $ref: '#/components/return/Error'
  /user/blog/{blogid}/page:
    get:
      summary: Get information on a specific blog page
      description: Returns the content of a blog page, along with its title
      tags:
        - "Blog Routes"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/path/BlogId'
        - $ref: '#/components/body/PageId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Page'
        401:
          description: Session is invalid
          schema:
            $ref: '#/components/return/Error'
        403:
          description: Blog is invalid or not owned by user
          schema:
            $ref: '#/components/return/Error'
  /reset: 
    delete:
      summary: Reset data
      description: Deletes all stored data for DonLog application, route should only be enabled for development
      tags:
      - "Admin Routes"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        403:
          description: Route is disabled
          schema:
            $ref: '#/components/return/Error'
